// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the App component correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <BrowserRouter>
        <React.Fragment>
          <Navbar />
          <div
            className="content"
          >
            <ToastContainer
              autoClose={5000}
              bodyClassName={null}
              className={null}
              closeButton={
                <CloseButton
                  ariaLabel="close"
                />
              }
              closeOnClick={true}
              draggable={true}
              draggablePercent={80}
              hideProgressBar={false}
              newestOnTop={false}
              pauseOnFocusLoss={true}
              pauseOnHover={true}
              position="top-right"
              progressClassName={null}
              progressStyle={null}
              rtl={false}
              style={null}
              toastClassName={null}
              transition={[Function]}
            />
            <Routes />
          </div>
          <Footer />
        </React.Fragment>
      </BrowserRouter>,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <React.Fragment>
          <Navbar />
          <div
            className="content"
          >
            <ToastContainer
              autoClose={5000}
              bodyClassName={null}
              className={null}
              closeButton={
                <CloseButton
                  ariaLabel="close"
                />
              }
              closeOnClick={true}
              draggable={true}
              draggablePercent={80}
              hideProgressBar={false}
              newestOnTop={false}
              pauseOnFocusLoss={true}
              pauseOnHover={true}
              position="top-right"
              progressClassName={null}
              progressStyle={null}
              rtl={false}
              style={null}
              toastClassName={null}
              transition={[Function]}
            />
            <Routes />
          </div>
          <Footer />
        </React.Fragment>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Navbar />,
            <div
              className="content"
            >
              <ToastContainer
                autoClose={5000}
                bodyClassName={null}
                className={null}
                closeButton={
                  <CloseButton
                    ariaLabel="close"
                  />
                }
                closeOnClick={true}
                draggable={true}
                draggablePercent={80}
                hideProgressBar={false}
                newestOnTop={false}
                pauseOnFocusLoss={true}
                pauseOnHover={true}
                position="top-right"
                progressClassName={null}
                progressStyle={null}
                rtl={false}
                style={null}
                toastClassName={null}
                transition={[Function]}
              />
              <Routes />
            </div>,
            <Footer />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ToastContainer
                  autoClose={5000}
                  bodyClassName={null}
                  className={null}
                  closeButton={
                    <CloseButton
                      ariaLabel="close"
                    />
                  }
                  closeOnClick={true}
                  draggable={true}
                  draggablePercent={80}
                  hideProgressBar={false}
                  newestOnTop={false}
                  pauseOnFocusLoss={true}
                  pauseOnHover={true}
                  position="top-right"
                  progressClassName={null}
                  progressStyle={null}
                  rtl={false}
                  style={null}
                  toastClassName={null}
                  transition={[Function]}
                />,
                <Routes />,
              ],
              "className": "content",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "autoClose": 5000,
                  "bodyClassName": null,
                  "className": null,
                  "closeButton": <CloseButton
                    ariaLabel="close"
                  />,
                  "closeOnClick": true,
                  "draggable": true,
                  "draggablePercent": 80,
                  "hideProgressBar": false,
                  "newestOnTop": false,
                  "pauseOnFocusLoss": true,
                  "pauseOnHover": true,
                  "position": "top-right",
                  "progressClassName": null,
                  "progressStyle": null,
                  "rtl": false,
                  "style": null,
                  "toastClassName": null,
                  "transition": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <BrowserRouter>
          <React.Fragment>
            <Navbar />
            <div
              className="content"
            >
              <ToastContainer
                autoClose={5000}
                bodyClassName={null}
                className={null}
                closeButton={
                  <CloseButton
                    ariaLabel="close"
                  />
                }
                closeOnClick={true}
                draggable={true}
                draggablePercent={80}
                hideProgressBar={false}
                newestOnTop={false}
                pauseOnFocusLoss={true}
                pauseOnHover={true}
                position="top-right"
                progressClassName={null}
                progressStyle={null}
                rtl={false}
                style={null}
                toastClassName={null}
                transition={[Function]}
              />
              <Routes />
            </div>
            <Footer />
          </React.Fragment>
        </BrowserRouter>,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <React.Fragment>
            <Navbar />
            <div
              className="content"
            >
              <ToastContainer
                autoClose={5000}
                bodyClassName={null}
                className={null}
                closeButton={
                  <CloseButton
                    ariaLabel="close"
                  />
                }
                closeOnClick={true}
                draggable={true}
                draggablePercent={80}
                hideProgressBar={false}
                newestOnTop={false}
                pauseOnFocusLoss={true}
                pauseOnHover={true}
                position="top-right"
                progressClassName={null}
                progressStyle={null}
                rtl={false}
                style={null}
                toastClassName={null}
                transition={[Function]}
              />
              <Routes />
            </div>
            <Footer />
          </React.Fragment>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Navbar />,
              <div
                className="content"
              >
                <ToastContainer
                  autoClose={5000}
                  bodyClassName={null}
                  className={null}
                  closeButton={
                    <CloseButton
                      ariaLabel="close"
                    />
                  }
                  closeOnClick={true}
                  draggable={true}
                  draggablePercent={80}
                  hideProgressBar={false}
                  newestOnTop={false}
                  pauseOnFocusLoss={true}
                  pauseOnHover={true}
                  position="top-right"
                  progressClassName={null}
                  progressStyle={null}
                  rtl={false}
                  style={null}
                  toastClassName={null}
                  transition={[Function]}
                />
                <Routes />
              </div>,
              <Footer />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ToastContainer
                    autoClose={5000}
                    bodyClassName={null}
                    className={null}
                    closeButton={
                      <CloseButton
                        ariaLabel="close"
                      />
                    }
                    closeOnClick={true}
                    draggable={true}
                    draggablePercent={80}
                    hideProgressBar={false}
                    newestOnTop={false}
                    pauseOnFocusLoss={true}
                    pauseOnHover={true}
                    position="top-right"
                    progressClassName={null}
                    progressStyle={null}
                    rtl={false}
                    style={null}
                    toastClassName={null}
                    transition={[Function]}
                  />,
                  <Routes />,
                ],
                "className": "content",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "autoClose": 5000,
                    "bodyClassName": null,
                    "className": null,
                    "closeButton": <CloseButton
                      ariaLabel="close"
                    />,
                    "closeOnClick": true,
                    "draggable": true,
                    "draggablePercent": 80,
                    "hideProgressBar": false,
                    "newestOnTop": false,
                    "pauseOnFocusLoss": true,
                    "pauseOnHover": true,
                    "position": "top-right",
                    "progressClassName": null,
                    "progressStyle": null,
                    "rtl": false,
                    "style": null,
                    "toastClassName": null,
                    "transition": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { REGISTER_USER_SUCCESS, REGISTER_USER_ERROR } from './types';\nimport { socialLoginInitiated, socialLoginSuccess } from './actionCreators';\nimport axiosInstance from '../config/axiosInstance';\nexport var fetchUsers = function fetchUsers(postData) {\n  return function (dispatch) {\n    axiosInstance.post('/api/users/', postData).then(function (response) {\n      localStorage.setItem('auth_token', response.data.user.auth_token);\n      dispatch({\n        type: REGISTER_USER_SUCCESS,\n        payload: true\n      });\n      toast.dismiss();\n      toast.success('Signup successful', {\n        autoClose: 3500,\n        hideProgressBar: true\n      });\n    }).catch(function (error) {\n      var errorMessage = '';\n      Object.keys(error.response.data.errors).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(error.response.data.errors, key)) {\n          errorMessage += \"\\n\".concat(key, \": \").concat(error.response.data.errors[key][0]);\n        }\n      });\n      dispatch({\n        type: REGISTER_USER_ERROR,\n        payload: errorMessage\n      });\n      toast.dismiss();\n      toast.error(errorMessage, {\n        autoClose: false,\n        hideProgressBar: true\n      });\n    });\n  };\n};\nexport var googleLoginUser = function googleLoginUser(serviceProvider, userData) {\n  return function (dispatch) {\n    dispatch(socialLoginInitiated(true));\n    return axiosInstance.post(serviceProvider, userData).then(function (res) {\n      localStorage.setItem('token', res.data.user.access_token);\n      console.log(res);\n      dispatch(socialLoginSuccess(res));\n    }).catch(function (error) {\n      console.log(error);\n      toast.error(error, {\n        autoClose: 3500,\n        hideProgressBar: true\n      }, {\n        position: toast.POSITION.TOP_CENTER\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/kakaireemmanuel/Documents/projects/React/ah-frontend-targaryen/src/actions/userActions.js"],"names":["toast","REGISTER_USER_SUCCESS","REGISTER_USER_ERROR","socialLoginInitiated","socialLoginSuccess","axiosInstance","fetchUsers","postData","dispatch","post","then","response","localStorage","setItem","data","user","auth_token","type","payload","dismiss","success","autoClose","hideProgressBar","catch","error","errorMessage","Object","keys","errors","forEach","key","prototype","hasOwnProperty","call","googleLoginUser","serviceProvider","userData","res","access_token","console","log","position","POSITION","TOP_CENTER"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\nimport { REGISTER_USER_SUCCESS, REGISTER_USER_ERROR } from './types';\nimport {\n  socialLoginInitiated,\n  socialLoginSuccess,\n} from './actionCreators';\nimport axiosInstance from '../config/axiosInstance';\n\n\nexport const fetchUsers = (postData) => dispatch => {\n  axiosInstance\n    .post('/api/users/', postData)\n    .then((response) => {\n      localStorage.setItem('auth_token', response.data.user.auth_token);\n      dispatch({ type: REGISTER_USER_SUCCESS, payload: true });\n      toast.dismiss();\n      toast.success('Signup successful', { autoClose: 3500, hideProgressBar: true });\n    })\n    .catch((error) => {\n      let errorMessage = '';\n\n      Object.keys(error.response.data.errors).forEach((key) => {\n        if (Object.prototype.hasOwnProperty.call(error.response.data.errors, key)) {\n          errorMessage += (`\\n${key}: ${error.response.data.errors[key][0]}`);\n        }\n      });\n\n      dispatch({ type: REGISTER_USER_ERROR, payload: errorMessage });\n      toast.dismiss();\n      toast.error(errorMessage, { autoClose: false, hideProgressBar: true });\n    });\n};\n\n\nexport const googleLoginUser = (serviceProvider, userData) => (dispatch) => {\n  dispatch(socialLoginInitiated(true));\n  return axiosInstance.post(serviceProvider, userData)\n    .then((res) => {\n      localStorage.setItem('token', res.data.user.access_token);\n      console.log(res)\n      dispatch(socialLoginSuccess(res));\n    })\n    .catch((error) => {\n      console.log(error);\n      toast.error(error, { autoClose: 3500, hideProgressBar: true }, {\n        position: toast.POSITION.TOP_CENTER,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}